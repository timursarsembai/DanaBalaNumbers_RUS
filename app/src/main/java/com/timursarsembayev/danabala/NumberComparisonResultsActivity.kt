package com.timursarsembayev.danabalanumbers

import android.content.Intent
import android.content.pm.ActivityInfo
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.widget.Button
import android.widget.ImageButton
import android.widget.LinearLayout
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import java.util.*

class NumberComparisonResultsActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private var tts: TextToSpeech? = null

    // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π —É—Å–ø–µ—Ö–∞
    private val excellentPhrases = listOf(
        "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–º–ø–∏–æ–Ω –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —á–∏—Å–µ–ª!",
        "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å, –∫–∞–∫–∏–µ —á–∏—Å–ª–∞ –±–æ–ª—å—à–µ, –∞ –∫–∞–∫–∏–µ –º–µ–Ω—å—à–µ!",
        "–ë—Ä–∞–≤–æ! –¢—ã —Å–ø—Ä–∞–≤–∏–ª—Å—è –ø—Ä–æ—Å—Ç–æ –≤–µ–ª–∏–∫–æ–ª–µ–ø–Ω–æ!",
        "–°—É–ø–µ—Ä! –¢—ã —Å—Ç–∞–Ω–æ–≤–∏—à—å—Å—è –Ω–∞—Å—Ç–æ—è—â–∏–º –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–º!"
    )

    private val goodPhrases = listOf(
        "–ú–æ–ª–æ–¥–µ—Ü! –¢—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—à—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª!",
        "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
        "–ó–¥–æ—Ä–æ–≤–æ! –¢—ã –¥–µ–ª–∞–µ—à—å –±–æ–ª—å—à–∏–µ —É—Å–ø–µ—Ö–∏!",
        "–£–º–Ω–∏—Ü–∞! –¢—ã –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è!"
    )

    private val okayPhrases = listOf(
        "–ù–µ–ø–ª–æ—Ö–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, –∏ —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!",
        "–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! –° –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º —É —Ç–µ–±—è –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ª—É—á—à–µ!",
        "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ —Å—Ç–∞—Ä–∞–µ—à—å—Å—è! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å —á–∏—Å–ª–∞!"
    )

    private val encouragementPhrases = listOf(
        "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –í—Å–µ —É—á–∞—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!",
        "–ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ! –ö–∞–∂–¥—ã–π –º–∞—Ç–µ–º–∞—Ç–∏–∫ –Ω–∞—á–∏–Ω–∞–ª —Å –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞–Ω–∏–π!",
        "–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞—É—á–∏—à—å—Å—è —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —á–∏—Å–ª–∞!",
        "–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! –£ —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!"
    )

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–ª—å–±–æ–º–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        requestedOrientation = ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE

        setContentView(R.layout.activity_number_comparison_results)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        tts = TextToSpeech(this, this)
        setupViews()
    }

    private fun setupViews() {
        val score = intent.getIntExtra("score", 0)
        val totalCorrectAnswers = intent.getIntExtra("totalCorrectAnswers", 0)
        val totalQuestions = intent.getIntExtra("totalQuestions", 20)
        val fromKidsComparison = intent.getBooleanExtra("fromKidsComparison", false)

        val scoreDisplay = findViewById<TextView>(R.id.scoreDisplay)
        val correctAnswersDisplay = findViewById<TextView>(R.id.correctAnswersDisplay)
        val accuracyDisplay = findViewById<TextView>(R.id.accuracyDisplay)
        val messageDisplay = findViewById<TextView>(R.id.messageDisplay)
        val motivationalMessage = findViewById<TextView>(R.id.motivationalMessage)
        val performanceBadge = findViewById<TextView>(R.id.performanceBadge)
        val congratulationsIcon = findViewById<TextView>(R.id.congratulationsIcon)
        val achievementStars = findViewById<LinearLayout>(R.id.achievementStars)

        scoreDisplay.text = "–û—á–∫–∏: $score"
        correctAnswersDisplay.text = "–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: $totalCorrectAnswers –∏–∑ $totalQuestions"

        val accuracy = if (totalQuestions > 0) {
            (totalCorrectAnswers.toFloat() / totalQuestions * 100).toInt()
        } else 0

        accuracyDisplay.text = "–¢–æ—á–Ω–æ—Å—Ç—å: $accuracy%"

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        when {
            accuracy >= 90 -> {
                messageDisplay.text = "üåü –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã —á–µ–º–ø–∏–æ–Ω!"
                motivationalMessage.text = "–¢—ã –æ—Ç–ª–∏—á–Ω–æ –∑–Ω–∞–µ—à—å, –∫–∞–∫ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å —á–∏—Å–ª–∞! –ü—Ä–æ–¥–æ–ª–∂–∞–π –∏–∑—É—á–∞—Ç—å –º–∞—Ç–µ–º–∞—Ç–∏–∫—É!"
                performanceBadge.text = "üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û!"
                congratulationsIcon.text = "üéâ"
                createStars(achievementStars, 5)
            }
            accuracy >= 75 -> {
                messageDisplay.text = "üëç –û—Ç–ª–∏—á–Ω–æ! –û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ!"
                motivationalMessage.text = "–¢—ã —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—à—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —á–∏—Å–µ–ª! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
                performanceBadge.text = "üåü –û–¢–õ–ò–ß–ù–û!"
                congratulationsIcon.text = "üòä"
                createStars(achievementStars, 4)
            }
            accuracy >= 50 -> {
                messageDisplay.text = "üìà –•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞!"
                motivationalMessage.text = "–¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! –ü—Ä–æ–¥–æ–ª–∂–∞–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è!"
                performanceBadge.text = "üëç –•–û–†–û–®–û!"
                congratulationsIcon.text = "üôÇ"
                createStars(achievementStars, 3)
            }
            else -> {
                messageDisplay.text = "üí™ –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!"
                motivationalMessage.text = "–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Å—è! –í—Å–µ —É—á–∞—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–ø—Ä–∞–≤–∏—à—å—Å—è!"
                performanceBadge.text = "üí™ –°–¢–ê–†–ê–ô–°–Ø!"
                congratulationsIcon.text = "ü§ó"
                createStars(achievementStars, 2)
            }
        }

        // –ö–Ω–æ–ø–∫–∏
        findViewById<Button>(R.id.restartButton).setOnClickListener {
            val intent = Intent(this, if (fromKidsComparison) KidsComparisonActivity::class.java else NumberComparisonActivity::class.java)
            startActivity(intent)
            finish()
        }

        findViewById<Button>(R.id.homeButton).setOnClickListener {
            val intent = Intent(this, MathExercisesActivity::class.java)
            intent.flags = Intent.FLAG_ACTIVITY_CLEAR_TOP
            startActivity(intent)
            finish()
        }

        findViewById<ImageButton>(R.id.backButton).setOnClickListener {
            finish()
        }
    }

    private fun createStars(container: LinearLayout, count: Int) {
        container.removeAllViews()

        for (i in 1..5) {
            val star = TextView(this).apply {
                text = if (i <= count) "‚≠ê" else "‚òÜ"
                textSize = 24f
                setPadding(4, 0, 4, 0)
            }
            container.addView(star)
        }
    }

    private fun speakCongratulations(accuracy: Int) {
        val congratulationPhrase = when {
            accuracy >= 90 -> excellentPhrases.random()
            accuracy >= 75 -> goodPhrases.random()
            accuracy >= 50 -> okayPhrases.random()
            else -> encouragementPhrases.random()
        }

        speakText(congratulationPhrase)
    }

    private fun speakText(text: String) {
        tts?.speak(text, TextToSpeech.QUEUE_ADD, null, null)
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            val result = tts!!.setLanguage(Locale("ru", "RU"))
            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                tts!!.setLanguage(Locale.getDefault())
            }

            // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS
            val accuracy = if (intent.getIntExtra("totalQuestions", 20) > 0) {
                (intent.getIntExtra("totalCorrectAnswers", 0).toFloat() / intent.getIntExtra("totalQuestions", 20) * 100).toInt()
            } else 0

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            android.os.Handler(mainLooper).postDelayed({
                speakCongratulations(accuracy)
            }, 1000)
        }
    }

    override fun onDestroy() {
        tts?.stop()
        tts?.shutdown()
        super.onDestroy()
    }
}
