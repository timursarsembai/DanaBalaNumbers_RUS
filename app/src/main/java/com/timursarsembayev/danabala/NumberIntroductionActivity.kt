package com.timursarsembayev.danabalanumbers

import android.animation.AnimatorSet
import android.animation.ObjectAnimator
import android.os.Bundle
import android.speech.tts.TextToSpeech
import android.widget.ImageButton
import android.widget.TextView
import android.widget.Button
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import androidx.core.view.GestureDetectorCompat
import android.view.GestureDetector
import android.view.MotionEvent
import java.util.*
import kotlin.random.Random

class NumberIntroductionActivity : AppCompatActivity(), TextToSpeech.OnInitListener {

    private var tts: TextToSpeech? = null
    private var currentSlide = 0
    private val totalSlides = 10 // –¶–∏—Ñ—Ä—ã –æ—Ç 0 –¥–æ 9
    private var currentObjectType = "" // –¢–µ–∫—É—â–∏–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è

    // UI —ç–ª–µ–º–µ–Ω—Ç—ã
    private lateinit var numberDisplay: TextView
    private lateinit var objectsDisplay: TextView
    private lateinit var lessonText: TextView
    private lateinit var speakButton: ImageButton
    private lateinit var prevButton: Button
    private lateinit var nextButton: Button
    private lateinit var slideIndicator: TextView

    // –ú–∞—Å—Å–∏–≤—ã —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    private val objectTypes = arrayOf(
        "üéà", "üéÅ", "üéÇ", "üé®", "üé≤", "üé≠",
        "üçé", "üçå", "üçá", "üçì", "üçí", "ü•ï", "ü•í", "üçÖ",
        "‚öΩ", "üèÄ", "üéæ", "üèê",
        "üåü", "‚≠ê", "‚ú®", "‚òÄÔ∏è", "üåô",
        "ü¶ã", "üêù", "üêû", "üê∏", "üê¢", "üê†", "üêõ",
        "üöó", "üöå", "üöì", "üöë", "üöí",
        "üìñ", "‚è∞", "üëì", "üëë",
        "üå∫", "üå∏", "üåº", "üåª", "üåπ", "üå∑", "üíê"
    )

    // –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–ª–æ–≤–µ —Å –ø–æ–ª–Ω—ã–º–∏ —Å–∫–ª–æ–Ω–µ–Ω–∏—è–º–∏
    data class WordDeclension(
        val nominative: String,      // –æ–¥–∏–Ω —Ü–≤–µ—Ç–æ–∫, –æ–¥–Ω–∞ –±–∞–±–æ—á–∫–∞
        val genitiveSingular: String, // –¥–≤–∞ —Ü–≤–µ—Ç–∫–∞, –¥–≤–µ –±–∞–±–æ—á–∫–∏
        val genitivePlural: String,   // –ø—è—Ç—å —Ü–≤–µ—Ç–∫–æ–≤, –ø—è—Ç—å –±–∞–±–æ—á–µ–∫
        val gender: Gender
    )

    // –ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ä–æ–¥–æ–≤
    enum class Gender {
        MASCULINE,  // –º—É–∂—Å–∫–æ–π —Ä–æ–¥
        FEMININE,   // –∂–µ–Ω—Å–∫–∏–π —Ä–æ–¥
        NEUTER      // —Å—Ä–µ–¥–Ω–∏–π —Ä–æ–¥
    }

    // –ü–æ–ª–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    private val objectDeclensions = mapOf(
        "üéà" to WordDeclension("—à–∞—Ä–∏–∫", "—à–∞—Ä–∏–∫–∞", "—à–∞—Ä–∏–∫–æ–≤", Gender.MASCULINE),
        "üéÅ" to WordDeclension("–ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–¥–∞—Ä–∫–∞", "–ø–æ–¥–∞—Ä–∫–æ–≤", Gender.MASCULINE),
        "üéÇ" to WordDeclension("—Ç–æ—Ä—Ç", "—Ç–æ—Ä—Ç–∞", "—Ç–æ—Ä—Ç–æ–≤", Gender.MASCULINE),
        "üé®" to WordDeclension("–∫—Ä–∞—Å–∫–∏", "–∫—Ä–∞—Å–æ–∫", "–∫—Ä–∞—Å–æ–∫", Gender.FEMININE),
        "üé≤" to WordDeclension("–∫—É–±–∏–∫", "–∫—É–±–∏–∫–∞", "–∫—É–±–∏–∫–æ–≤", Gender.MASCULINE),
        "üé≠" to WordDeclension("–º–∞—Å–∫–∞", "–º–∞—Å–∫–∏", "–º–∞—Å–æ–∫", Gender.FEMININE),
        "üçé" to WordDeclension("—è–±–ª–æ–∫–æ", "—è–±–ª–æ–∫–∞", "—è–±–ª–æ–∫", Gender.NEUTER),
        "üçå" to WordDeclension("–±–∞–Ω–∞–Ω", "–±–∞–Ω–∞–Ω–∞", "–±–∞–Ω–∞–Ω–æ–≤", Gender.MASCULINE),
        "üçá" to WordDeclension("–≤–∏–Ω–æ–≥—Ä–∞–¥", "–≤–∏–Ω–æ–≥—Ä–∞–¥–∞", "–≤–∏–Ω–æ–≥—Ä–∞–¥–æ–≤", Gender.MASCULINE),
        "üçì" to WordDeclension("–∫–ª—É–±–Ω–∏–∫–∞", "–∫–ª—É–±–Ω–∏–∫–∏", "–∫–ª—É–±–Ω–∏–∫–∏", Gender.FEMININE),
        "üçí" to WordDeclension("–≤–∏—à–Ω—è", "–≤–∏—à–Ω–∏", "–≤–∏—à–µ–Ω—å", Gender.FEMININE),
        "ü•ï" to WordDeclension("–º–æ—Ä–∫–æ–≤–∫–∞", "–º–æ—Ä–∫–æ–≤–∫–∏", "–º–æ—Ä–∫–æ–≤–æ–∫", Gender.FEMININE),
        "ü•í" to WordDeclension("–æ–≥—É—Ä–µ—Ü", "–æ–≥—É—Ä—Ü–∞", "–æ–≥—É—Ä—Ü–æ–≤", Gender.MASCULINE),
        "üçÖ" to WordDeclension("–ø–æ–º–∏–¥–æ—Ä", "–ø–æ–º–∏–¥–æ—Ä–∞", "–ø–æ–º–∏–¥–æ—Ä–æ–≤", Gender.MASCULINE),
        "‚öΩ" to WordDeclension("–º—è—á", "–º—è—á–∞", "–º—è—á–µ–π", Gender.MASCULINE),
        "üèÄ" to WordDeclension("–º—è—á", "–º—è—á–∞", "–º—è—á–µ–π", Gender.MASCULINE),
        "üéæ" to WordDeclension("–º—è—á–∏–∫", "–º—è—á–∏–∫–∞", "–º—è—á–∏–∫–æ–≤", Gender.MASCULINE),
        "üèê" to WordDeclension("–º—è—á", "–º—è—á–∞", "–º—è—á–µ–π", Gender.MASCULINE),
        "üåü" to WordDeclension("–∑–≤–µ–∑–¥–∞", "–∑–≤–µ–∑–¥—ã", "–∑–≤–µ–∑–¥", Gender.FEMININE),
        "‚≠ê" to WordDeclension("–∑–≤–µ–∑–¥–æ—á–∫–∞", "–∑–≤–µ–∑–¥–æ—á–∫–∏", "–∑–≤–µ–∑–¥–æ—á–µ–∫", Gender.FEMININE),
        "‚ú®" to WordDeclension("–∏—Å–∫–æ—Ä–∫–∞", "–∏—Å–∫–æ—Ä–∫–∏", "–∏—Å–∫–æ—Ä–æ–∫", Gender.FEMININE),
        "‚òÄÔ∏è" to WordDeclension("—Å–æ–ª–Ω—Ü–µ", "—Å–æ–ª–Ω—Ü–∞", "—Å–æ–ª–Ω—Ü", Gender.NEUTER),
        "üåô" to WordDeclension("–ª—É–Ω–∞", "–ª—É–Ω—ã", "–ª—É–Ω", Gender.FEMININE),
        "ü¶ã" to WordDeclension("–±–∞–±–æ—á–∫–∞", "–±–∞–±–æ—á–∫–∏", "–±–∞–±–æ—á–µ–∫", Gender.FEMININE),
        "üêù" to WordDeclension("–ø—á–µ–ª–∞", "–ø—á–µ–ª—ã", "–ø—á–µ–ª", Gender.FEMININE),
        "üêû" to WordDeclension("–±–æ–∂—å—è –∫–æ—Ä–æ–≤–∫–∞", "–±–æ–∂—å–µ–π –∫–æ—Ä–æ–≤–∫–∏", "–±–æ–∂—å–∏—Ö –∫–æ—Ä–æ–≤–æ–∫", Gender.FEMININE),
        "üê∏" to WordDeclension("–ª—è–≥—É—à–∫–∞", "–ª—è–≥—É—à–∫–∏", "–ª—è–≥—É—à–µ–∫", Gender.FEMININE),
        "üê¢" to WordDeclension("—á–µ—Ä–µ–ø–∞—Ö–∞", "—á–µ—Ä–µ–ø–∞—Ö–∏", "—á–µ—Ä–µ–ø–∞—Ö", Gender.FEMININE),
        "üê†" to WordDeclension("—Ä—ã–±–∫–∞", "—Ä—ã–±–∫–∏", "—Ä—ã–±–æ–∫", Gender.FEMININE),
        "üêõ" to WordDeclension("–≥—É—Å–µ–Ω–∏—Ü–∞", "–≥—É—Å–µ–Ω–∏—Ü—ã", "–≥—É—Å–µ–Ω–∏—Ü", Gender.FEMININE),
        "üöó" to WordDeclension("–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω—ã", "–º–∞—à–∏–Ω", Gender.FEMININE),
        "üöå" to WordDeclension("–∞–≤—Ç–æ–±—É—Å", "–∞–≤—Ç–æ–±—É—Å–∞", "–∞–≤—Ç–æ–±—É—Å–æ–≤", Gender.MASCULINE),
        "üöì" to WordDeclension("–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω—ã", "–º–∞—à–∏–Ω", Gender.FEMININE),
        "üöë" to WordDeclension("–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω—ã", "–º–∞—à–∏–Ω", Gender.FEMININE),
        "üöí" to WordDeclension("–º–∞—à–∏–Ω–∞", "–º–∞—à–∏–Ω—ã", "–º–∞—à–∏–Ω", Gender.FEMININE),
        "üìñ" to WordDeclension("–∫–Ω–∏–≥–∞", "–∫–Ω–∏–≥–∏", "–∫–Ω–∏–≥", Gender.FEMININE),
        "‚è∞" to WordDeclension("—á–∞—Å—ã", "—á–∞—Å–æ–≤", "—á–∞—Å–æ–≤", Gender.MASCULINE),
        "üëì" to WordDeclension("–æ—á–∫–∏", "–æ—á–∫–æ–≤", "–æ—á–∫–æ–≤", Gender.MASCULINE),
        "üëë" to WordDeclension("–∫–æ—Ä–æ–Ω–∞", "–∫–æ—Ä–æ–Ω—ã", "–∫–æ—Ä–æ–Ω", Gender.FEMININE),
        "üå∫" to WordDeclension("—Ü–≤–µ—Ç–æ–∫", "—Ü–≤–µ—Ç–∫–∞", "—Ü–≤–µ—Ç–∫–æ–≤", Gender.MASCULINE),
        "üå∏" to WordDeclension("—Ü–≤–µ—Ç–æ–∫", "—Ü–≤–µ—Ç–∫–∞", "—Ü–≤–µ—Ç–∫–æ–≤", Gender.MASCULINE),
        "üåº" to WordDeclension("—Ä–æ–º–∞—à–∫–∞", "—Ä–æ–º–∞—à–∫–∏", "—Ä–æ–º–∞—à–µ–∫", Gender.FEMININE),
        "üåª" to WordDeclension("–ø–æ–¥—Å–æ–ª–Ω—É—Ö", "–ø–æ–¥—Å–æ–ª–Ω—É—Ö–∞", "–ø–æ–¥—Å–æ–ª–Ω—É—Ö–æ–≤", Gender.MASCULINE),
        "üåπ" to WordDeclension("—Ä–æ–∑–∞", "—Ä–æ–∑—ã", "—Ä–æ–∑", Gender.FEMININE),
        "üå∑" to WordDeclension("—Ç—é–ª—å–ø–∞–Ω", "—Ç—é–ª—å–ø–∞–Ω–∞", "—Ç—é–ª—å–ø–∞–Ω–æ–≤", Gender.MASCULINE),
        "üíê" to WordDeclension("–±—É–∫–µ—Ç", "–±—É–∫–µ—Ç–∞", "–±—É–∫–µ—Ç–æ–≤", Gender.MASCULINE)
    )

    // –î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ª–∞–π–¥–æ–≤
    private val numberData = listOf(
        NumberSlideData(
            number = 0,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –ù–û–õ–¨. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Å–æ–≤—Å–µ–º –Ω–µ—Ç, –Ω–∏—á–µ–≥–æ. –ù–æ–ª—å - —ç—Ç–æ –ø—É—Å—Ç–æ—Ç–∞, –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞."
        ),
        NumberSlideData(
            number = 1,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –û–î–ò–ù. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–¥–∏–Ω –ø—Ä–µ–¥–º–µ—Ç, —á—Ç–æ-—Ç–æ –æ–¥–Ω–æ. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 2,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –î–í–ê. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–∞, –ø–∞—Ä—É. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 3,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –¢–†–ò. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Ç—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç–∞. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 4,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –ß–ï–¢–´–†–ï. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —á–µ—Ç—ã—Ä–µ –ø—Ä–µ–¥–º–µ—Ç–∞. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 5,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –ü–Ø–¢–¨. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –ø—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 6,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –®–ï–°–¢–¨. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —à–µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 7,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –°–ï–ú–¨. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç —Å–µ–º—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 8,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –í–û–°–ï–ú–¨. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –≤–æ—Å–µ–º—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        ),
        NumberSlideData(
            number = 9,
            objects = "",
            lesson = "–≠—Ç–æ —Ü–∏—Ñ—Ä–∞ –î–ï–í–Ø–¢–¨. –û–Ω–∞ –æ–∑–Ω–∞—á–∞–µ—Ç –¥–µ–≤—è—Ç—å –ø—Ä–µ–¥–º–µ—Ç–æ–≤. –ü–æ—Å–º–æ—Ç—Ä–∏ - –∑–¥–µ—Å—å {OBJECT_DESCRIPTION}."
        )
    )

    data class NumberSlideData(
        val number: Int,
        val objects: String,
        val lesson: String
    )

    private fun generateRandomObjects(count: Int): String {
        if (count == 0) return ""

        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞
        val objectType = objectTypes[Random.nextInt(objectTypes.size)]
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        currentObjectType = objectType

        val result = StringBuilder()

        // –õ–æ–≥–∏–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –≤ —Ä–æ–¥–∞ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        val itemsPerRow = when (count) {
            1, 2, 3, 4 -> count // 1-4 –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ –æ–¥–∏–Ω —Ä—è–¥
            5, 6 -> 3 // 5-6 –ø—Ä–µ–¥–º–µ—Ç–æ–≤: –ø–æ 3 –≤ —Ä—è–¥ (2 —Ä—è–¥–∞)
            7, 8, 9 -> when (count) {
                7 -> 4 // 7 –ø—Ä–µ–¥–º–µ—Ç–æ–≤: 4 + 3
                8 -> 4 // 8 –ø—Ä–µ–¥–º–µ—Ç–æ–≤: 4 + 4
                9 -> 5 // 9 –ø—Ä–µ–¥–º–µ—Ç–æ–≤: 5 + 4
                else -> 4
            }
            else -> 4
        }

        for (i in 1..count) {
            result.append(objectType)

            // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ)
            if (i % itemsPerRow == 0 && i < count) {
                result.append("\n")
            }
        }

        return result.toString()
    }

    private fun getObjectNameWithCount(count: Int, objectEmoji: String): String {
        val objectInfo = objectDeclensions[objectEmoji] ?: WordDeclension("–ø—Ä–µ–¥–º–µ—Ç", "–ø—Ä–µ–¥–º–µ—Ç–∞", "–ø—Ä–µ–¥–º–µ—Ç–æ–≤", Gender.MASCULINE)
        val objectName = objectInfo.nominative
        val genitiveSingular = objectInfo.genitiveSingular
        val genitivePlural = objectInfo.genitivePlural
        val gender = objectInfo.gender

        return when (count) {
            1 -> {
                val numeral = when (gender) {
                    Gender.MASCULINE -> "–æ–¥–∏–Ω"
                    Gender.FEMININE -> "–æ–¥–Ω–∞"
                    Gender.NEUTER -> "–æ–¥–Ω–æ"
                }
                "$numeral $objectName"
            }
            2 -> {
                val numeral = when (gender) {
                    Gender.MASCULINE -> "–¥–≤–∞"
                    Gender.FEMININE -> "–¥–≤–µ"
                    Gender.NEUTER -> "–¥–≤–∞"
                }
                "$numeral $genitiveSingular"
            }
            3 -> {
                val numeral = "—Ç—Ä–∏"
                "$numeral $genitiveSingular"
            }
            4 -> {
                val numeral = "—á–µ—Ç—ã—Ä–µ"
                "$numeral $genitiveSingular"
            }
            5, 6, 7, 8, 9 -> {
                val numeral = when (count) {
                    5 -> "–ø—è—Ç—å"
                    6 -> "—à–µ—Å—Ç—å"
                    7 -> "—Å–µ–º—å"
                    8 -> "–≤–æ—Å–µ–º—å"
                    9 -> "–¥–µ–≤—è—Ç—å"
                    else -> count.toString()
                }
                "$numeral $genitivePlural"
            }
            else -> "$count $objectName"
        }
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_number_introduction)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }

        tts = TextToSpeech(this, this)
        initializeViews()
        setupClickListeners()
        setupSwipeGestures()
        updateSlide()
    }

    private fun initializeViews() {
        numberDisplay = findViewById(R.id.numberDisplay)
        objectsDisplay = findViewById(R.id.objectsDisplay)
        lessonText = findViewById(R.id.lessonText)
        speakButton = findViewById(R.id.speakButton)
        prevButton = findViewById(R.id.prevButton)
        nextButton = findViewById(R.id.nextButton)
        slideIndicator = findViewById(R.id.slideIndicator)
    }

    private fun setupClickListeners() {
        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        findViewById<ImageButton>(R.id.backButton).setOnClickListener {
            finish()
        }

        // –ö–Ω–æ–ø–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        speakButton.setOnClickListener {
            speakCurrentLesson()
        }

        // –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        prevButton.setOnClickListener {
            if (currentSlide > 0) {
                currentSlide--
                updateSlide()
                animateSlideTransition()
                speakCurrentLesson() // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
            }
        }

        nextButton.setOnClickListener {
            if (currentSlide < totalSlides - 1) {
                // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Å–ª–∞–π–¥—É
                currentSlide++
                updateSlide()
                animateSlideTransition()
                speakCurrentLesson() // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
            } else {
                // –ù–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–ª–∞–π–¥–µ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—á–∞–ª—É (—Å–ª–∞–π–¥ 0)
                currentSlide = 0
                updateSlide()
                animateSlideTransition()
                speakCurrentLesson() // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–∞—á–∞–ª—É
            }
        }
    }

    private lateinit var gestureDetector: GestureDetectorCompat

    private fun setupSwipeGestures() {
        val listener = object : GestureDetector.SimpleOnGestureListener() {
            private val SWIPE_THRESHOLD = 100
            private val SWIPE_VELOCITY_THRESHOLD = 100
            override fun onDown(e: MotionEvent): Boolean = true
            override fun onFling(e1: MotionEvent?, e2: MotionEvent, velocityX: Float, velocityY: Float): Boolean {
                val start = e1 ?: return false
                val diffX = e2.x - start.x
                val diffY = e2.y - start.y
                if (kotlin.math.abs(diffX) > kotlin.math.abs(diffY)
                    && kotlin.math.abs(diffX) > SWIPE_THRESHOLD
                    && kotlin.math.abs(velocityX) > SWIPE_VELOCITY_THRESHOLD) {
                    return if (diffX > 0) {
                        // –°–º–∞—Ö–∏–≤–∞–Ω–∏–µ –≤–ø—Ä–∞–≤–æ -> –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥
                        prevButton.performClick()
                        true
                    } else {
                        // –°–º–∞—Ö–∏–≤–∞–Ω–∏–µ –≤–ª–µ–≤–æ -> —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
                        nextButton.performClick()
                        true
                    }
                }
                return false
            }
        }
        this.gestureDetector = GestureDetectorCompat(this, listener)
        // –í–µ—à–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ü–∏—Ñ—Ä–æ–π –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏
        val swipeArea = findViewById<android.view.View>(R.id.contentCard)
        swipeArea.setOnTouchListener { v, event ->
            val consumed = gestureDetector.onTouchEvent(event)
            if (event.action == MotionEvent.ACTION_UP) v.performClick()
            consumed
        }
    }

    private fun updateSlide() {
        val slideData = numberData[currentSlide]

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
        numberDisplay.text = slideData.number.toString()

        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã
        if (slideData.number == 0) {
            // –î–ª—è –Ω—É–ª—è –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
            objectsDisplay.text = ""
        } else {
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
            val randomObjects = generateRandomObjects(slideData.number)
            objectsDisplay.text = randomObjects
        }

        // –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
        val textSize = if (slideData.number == 9) {
            40f // –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è —Ü–∏—Ñ—Ä—ã 9
        } else {
            48f // –û–±—ã—á–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ü–∏—Ñ—Ä
        }
        objectsDisplay.textSize = textSize

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞
        if (slideData.number == 0) {
            lessonText.text = slideData.lesson
        } else {
            val objectDescription = getObjectNameWithCount(slideData.number, currentObjectType)
            lessonText.text = slideData.lesson.replace("{OBJECT_DESCRIPTION}", objectDescription)
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–ª–∞–π–¥–æ–≤
        slideIndicator.text = "${currentSlide + 1} / $totalSlides"

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        prevButton.isEnabled = currentSlide > 0

        // –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–∞–ª–µ–µ/–í –Ω–∞—á–∞–ª–æ"
        if (currentSlide < totalSlides - 1) {
            // –û–±—ã—á–Ω—ã–µ —Å–ª–∞–π–¥—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–î–∞–ª–µ–µ"
            nextButton.text = "–î–∞–ª–µ–µ ‚Üí"
            nextButton.isEnabled = true
            nextButton.alpha = 1.0f
        } else {
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–∞–π–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º "–í –Ω–∞—á–∞–ª–æ"
            nextButton.text = "–í –Ω–∞—á–∞–ª–æ ‚Ü∫"
            nextButton.isEnabled = true
            nextButton.alpha = 1.0f
        }

        // –ú–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        prevButton.alpha = if (currentSlide > 0) 1.0f else 0.5f
    }

    private fun speakCurrentLesson() {
        val slideData = numberData[currentSlide]

        val textToSpeak = if (slideData.number == 0) {
            "–¶–∏—Ñ—Ä–∞ ${slideData.number}. ${slideData.lesson}"
        } else {
            val objectDescription = getObjectNameWithCount(slideData.number, currentObjectType)
            val lessonWithObject = slideData.lesson.replace("{OBJECT_DESCRIPTION}", objectDescription)
            "–¶–∏—Ñ—Ä–∞ ${slideData.number}. $lessonWithObject"
        }

        speakText(textToSpeak)

        // –ê–Ω–∏–º–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        animateSpeakButton()
    }

    private fun getNumberWord(number: Int): String {
        return when (number) {
            1 -> "–æ–¥–∏–Ω"
            2 -> "–¥–≤–∞"
            3 -> "—Ç—Ä–∏"
            4 -> "—á–µ—Ç—ã—Ä–µ"
            5 -> "–ø—è—Ç—å"
            6 -> "—à–µ—Å—Ç—å"
            7 -> "—Å–µ–º—å"
            8 -> "–≤–æ—Å–µ–º—å"
            9 -> "–¥–µ–≤—è—Ç—å"
            else -> number.toString()
        }
    }

    private fun speakText(text: String) {
        tts?.speak(text, TextToSpeech.QUEUE_FLUSH, null, null)
    }

    private fun animateSlideTransition() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        val fadeIn = ObjectAnimator.ofFloat(numberDisplay, "alpha", 0f, 1f)
        val scaleX = ObjectAnimator.ofFloat(numberDisplay, "scaleX", 0.8f, 1f)
        val scaleY = ObjectAnimator.ofFloat(numberDisplay, "scaleY", 0.8f, 1f)

        val animatorSet = AnimatorSet()
        animatorSet.playTogether(fadeIn, scaleX, scaleY)
        animatorSet.duration = 300
        animatorSet.start()
    }

    private fun animateSpeakButton() {
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –∫–Ω–æ–ø–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        val scaleX = ObjectAnimator.ofFloat(speakButton, "scaleX", 1f, 1.2f, 1f)
        val scaleY = ObjectAnimator.ofFloat(speakButton, "scaleY", 1f, 1.2f, 1f)

        val animatorSet = AnimatorSet()
        animatorSet.playTogether(scaleX, scaleY)
        animatorSet.duration = 300
        animatorSet.start()
    }

    override fun onInit(status: Int) {
        if (status == TextToSpeech.SUCCESS) {
            val result = tts!!.setLanguage(Locale("ru", "RU"))
            if (result == TextToSpeech.LANG_MISSING_DATA || result == TextToSpeech.LANG_NOT_SUPPORTED) {
                tts!!.setLanguage(Locale.getDefault())
            }
            // –û–∑–≤—É—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–ª–∞–π–¥ –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TTS
            speakCurrentLesson()
        }
    }

    override fun onDestroy() {
        tts?.stop()
        tts?.shutdown()
        super.onDestroy()
    }
}
